name: Upload Python Package
on:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  release-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.9'
      - name: Check version matches tag
        run: |
          TAG="${GITHUB_REF_NAME#v}"
          python - <<'PY'
          import tomllib, sys, os
          tag = os.environ["TAG"]
          ver = tomllib.loads(open("pyproject.toml","rb").read())["project"]["version"]
          print(f"pyproject version: {ver}, tag: {tag}")
          if ver!=tag:
            print("ERROR - mismatched tag in toml and Github release")
            sys.exit(1)
          else:
            sys.exit(0)
          PY
      # Build wheel + sdist
      - uses: astral-sh/setup-uv@v1
      - name: Build distributions
        run: uv build

      - name: List artifacts
        run: ls -l dist

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  pypi-publish:
    runs-on: ubuntu-latest
    needs: [release-build]
    permissions:
      id-token: write   # required for Trusted Publishing
      contents: read
    environment:
      name: pypi
      url: https://pypi.org/project/skivvy/${{ github.event.release.name }}

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/

  get-version:
    runs-on: ubuntu-latest
    needs: [pypi-publish]
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
    steps:
      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT

  build-examples-image:
    needs: [get-version]
    uses: ./.github/workflows/docker-build.yml
    with:
      dockerfile: Dockerfile.examples
      tag: examples-${{ needs.get-version.outputs.version }}
    secrets: inherit

  build-ci-image:
    needs: [get-version]
    uses: ./.github/workflows/docker-build.yml
    with:
      dockerfile: Dockerfile.ci
      tag: ci-${{ needs.get-version.outputs.version }}
    secrets: inherit
